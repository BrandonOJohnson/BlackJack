/***** DO NOT EDIT THIS FILE *****/

/***** DO NOT EDIT THIS FILE *****/

/***** DO NOT EDIT THIS FILE *****/

/***** DO NOT EDIT THIS FILE *****/

/***** DO NOT EDIT THIS FILE *****/


// Test class for CMS 170 Project 4
// DSM, 2015

// Run this class to test DeckOfCards and Hand


public class Project4Test {
  
  int testsPassed = 0;
  int testsFailed = 0;
  
  
  public int convertCardToInt(Card c) {
    int value = 0;
    Rank r = c.getRank();
    if (r == Rank.TWO)
      value = 0;
    if (r == Rank.THREE)
      value = 1;
    if (r == Rank.FOUR)
      value = 2;
    if (r == Rank.FIVE)
      value = 3;
    if (r == Rank.SIX)
      value = 4;
    if (r == Rank.SEVEN)
      value = 5;
    if (r == Rank.EIGHT)
      value = 6;
    if (r == Rank.NINE)
      value = 7;
    if (r == Rank.TEN)
      value = 8;
    if (r == Rank.JACK)
      value = 9;
    if (r == Rank.QUEEN)
      value = 10;
    if (r == Rank.KING)
      value = 11;
    if (r == Rank.ACE)
      value = 12;
    
    Suit s = c.getSuit();
    if (s == Suit.HEARTS)
      value += 13;
    if (s == Suit.DIAMONDS)
      value += 26;
    if (s == Suit.CLUBS)
      value += 39;
    
    return value;
  }
  
  public void runTests() {
   
    
    /*** Create new DeckOfCards ***/
    System.out.print("Creating a new DeckOfCards and a new Hand...");
    DeckOfCards d = new DeckOfCards();
    
    if (d == null) {
      System.out.println("\n\tFailed to create DeckOfCards.");
      testsFailed += 1;
      return;
    }

    Hand h = new Hand();
    
    if (h == null) {
      System.out.println("\n\tFailed to create Hand.");
      testsFailed += 1;
      return;
    }
    
    System.out.println("Passed!");
    testsPassed += 1;
    
    
    /*** Deal a single card ***/
    System.out.print("Dealing a single card...");
    Card c = null;
    c = d.deal();
    
    if (c == null) {
      System.out.println("\n\tdeal() did not return a card.");
      testsFailed += 1;
      return;
    }
    System.out.println("Passed!");
    testsPassed += 1;
    
    
    /*** Verify that d contains all cards ***/
    System.out.print("Testing for all cards in initial deck...");
    try {
      boolean[] a = new boolean[52];
      int n = convertCardToInt(c);
      a[n] = true;
    
      for (int i = 1; i < 52; i++) {
        c = d.deal();
      
        if (c == null) {
          System.out.println("\n\tdeal() did not return a card.");
          testsFailed += 1;
          return;
        }
      
        n = convertCardToInt(c);
      
        if (a[n]) {
          System.out.println("\n\tGot " + c + " twice.");
          testsFailed += 1;
          return;
        }
        else {
          a[n] = true; 
        }
      }
    }
    catch(Exception e) {
      System.out.println("\n\tAn error occurred while dealing cards.");
      System.out.println(e);
      testsFailed += 1;
      return; 
    }
    System.out.println("Passed!");
    testsPassed += 1;
       
    
    /*** Testing shuffle ***/
    
    // Randomly shuffle the deck a large number of times
    // Deal first card after each shuffle
    //
    // If the shuffle is working properly each card should have 
    // approx. 1/52 chance of being first in the deck
    //
    // 1/52 ~ .019, so values between .009 and .029 are accepted
    System.out.print("Testing shuffle() (this may take a moment)...");
    try {
      int nTrials = 10000000;
      int[] cardCounts = new int[52];
      
      for (int i = 0; i < nTrials; i++) {
        d.shuffle();
        int n = convertCardToInt(d.deal());
        cardCounts[n] += 1;
      }
      
      for (int i = 0; i < cardCounts.length; i++) {
        double f = ((double) cardCounts[i]) / nTrials;
        if (f > .029 || f < .009) {
          System.out.println("\n\tCard appeared on top with probability " + f
                            + ".  Should be approximately .019.");
          testsFailed += 1;
          return;
        }
      }
    }
    catch(Exception e) {
      System.out.println("\n\tAn error while testing shuffle.");
      System.out.println(e);
      testsFailed += 1;
      return; 
    }
    System.out.println("Passed!");
    testsPassed += 1;
       
    
    /*** Test addCard and getFirstCard ***/
    System.out.print("Testing addCard() and getFirstCard()...");
    System.out.println("\n\tAdding ACE of SPADES.");
    h.addCard(new Card(Suit.SPADES, Rank.ACE));
    c = h.getFirstCard();
    
    if (c == null || !c.getRank().equals(Rank.ACE) || !c.getSuit().equals(Suit.SPADES)) {
      System.out.println("\n\tDid not get ACE of SPADES, got " + c);
      testsFailed += 1;
      return;
    }
    testsPassed += 1;
    
    System.out.print("Testing getScore()...");
    System.out.print("\n\tAdding QUEEN of HEARTS.");
    h.addCard(new Card(Suit.HEARTS, Rank.QUEEN));
    int score = h.getScore();
    if (score != 21) {
      System.out.println("\n\tExpected 21, got " + score);
      testsFailed += 1;
      return;
    }
    System.out.println("\n\tGot 13.  Passed!");
    testsPassed += 1;
    
    System.out.print("Testing getScore() on a new Hand with two aces...");
    h = new Hand();
    h.addCard(new Card(Suit.SPADES, Rank.ACE));
    h.addCard(new Card(Suit.CLUBS, Rank.ACE));
    
    score = h.getScore();
    if (score != 12) {
      System.out.println("\n\tExpected 12, got " + score);
      testsFailed += 1;
      return;
    }
    System.out.println("got 12.  Passed!");
    testsPassed += 1;
    
     
    /*** Done! ***/
  }
  
  
  public static void main(String[] args) {
    Project4Test test = new Project4Test();
    test.runTests();
    
    int testsTried = test.testsPassed + test.testsFailed;
    
    System.out.println("Passed " + test.testsPassed + " tests.");
    
    if (test.testsPassed == 7) {
      System.out.println("Completed all tests successfully.");
    }
  }
}